#!/bin/bash
#  logging-wrapper.sh
#  Generic shell wrapper that performs an operation
#+ and logs it.

DEFAULT_LOGFILE=logfile.txt

# Set the following two variables.
OPERATION=/Applications/CEL/Common/Cura/CuraEngine_exe
#         Can be a complex chain of commands,
#+        for example an awk script or a pipe . . .

LOGFILE=/Users/$USER/Desktop/CelRoboxlog.log
if [ -z "$LOGFILE" ]
then     # If not set, default to ...
  LOGFILE="$DEFAULT_LOGFILE"
fi

#         Command-line arguments, if any, for the operation.
OPTIONS="$@"
CURRENTPATH="$PWD/"
#remove current path to avoid bugs with spaces
OPTIONSCLEAN=${OPTIONS/$CURRENTPATH/}

#PWDESCAPED=${PWD/ /"\ "}

# Log it.
echo "`date` `whoami` $PWD $OPERATION "$@"" >> $LOGFILE

echo "`date` cleanOptions : $OPTIONSCLEAN" >> $LOGFILE
#echo "`date` PWDESCAPED : $PWDESCAPED" >> $LOGFILE


OUTPUTFILE="output.gcode"
#SLICER="/Applications/Slic3r.app/Contents/MacOS/Slic3r"
#SLICER="java -Duser.dir=$PWDESCAPED -jar robox-slicer-flow-1.0-SNAPSHOT.jar --am-installation-dir /Applications/CEL"
SLICER="java -jar /Applications/CEL/Common/robox-slicer-flow-1.0-SNAPSHOT.jar"
INPUTFILES=();

function usage()
{
    echo "Simple wrapper to execute a different slicer"
    echo ""
    echo "./CuraEngine"
    echo "\t-h --help"
    echo "\t-o,--output <file>"
    echo "\t-s, --slicer </full/path/to/slicer>"
    echo ""
}

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
	-h|--help)
		usage
		exit
	;;
    -s|--slicer)
    	SLICER="$2"
    	shift # past argument
    ;;
    -o|--output)
    	OUTPUTFILE="$2"
    	OUTPUTFILES="$OUTPUTFILES $2"
    	shift # past argument
    ;;
    -v)
    	# verbose output - ignore argument
    ;;
    -p)
    	# show progress - ignore argument
    ;;
    -c)
    	ROBOXPROFILE="$2"
    	# configuration file - ignore argument
    	shift #past argument
    ;;
    *stl)
      # remove folder
      cleanfile=$(basename "$key")
    	INPUTFILES=("${INPUTFILES[@]}" "$cleanfile")
    ;;
    *)
            # unknown option
    ;;
esac
shift # past argument or value
done

# echo $SLICER "--gui" "-o" "$OUTPUTFILE" ${INPUTFILES[@]}
regex='PrintJobs'
if [[ "$PWD" =~ $regex ]]
then
  # Execute our custom slicer if this is a print job
  #printf -v ARG_LIST '%q ' "--gui" "-o" "$OUTPUTFILE" "${INPUTFILES[@]}"
  #printf -v ARG_LIST '%q ' "$@"
  #echo "`date` jarCall : $SLICER $ARG_LIST" >> $LOGFILE
  #eval "$SLICER $ARG_LIST"
  echo "`date` jarCall : $SLICER $OPTIONSCLEAN 2>>log.log" >> $LOGFILE
  exec $SLICER "$OPTIONSCLEAN 2>>log.log"
  #exec $SLICER "--gui" "-o" "$OUTPUTFILE" ${INPUTFILES[@]}

  # Execute Cura slicer if we just want to print something
  #  exec $OPERATION $OPTIONS
else
  # Use default slicer if we're just calculating times
  exec $OPERATION $OPTIONSCLEAN
  #printf -v ARG_LIST '%q ' "-v" "-p" "-c" "$ROBOXPROFILE" "-o" "$OUTPUTFILE" "${INPUTFILES[@]}"
  #eval "$OPERATION $ARG_LIST"
fi
